"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var HJBridgeCmdHandler = /*#__PURE__*/function () {
  function HJBridgeCmdHandler() {
    var _this = this;
    _classCallCheck(this, HJBridgeCmdHandler);
    _defineProperty(this, "putFunc", function (key, func) {
      if (_this.mMap !== null && typeof func === 'function') {
        if (!_this.mMap.has(key)) _this.mMap.set(key, func);
      }
    });
    _defineProperty(this, "execFunc", function (key, params) {
      if (_this.mMap !== null) {
        var func = _this.mMap.get(key);
        if (typeof func === 'function') func(params);
      }
    });
    this.mMap = new Map();
  }
  _createClass(HJBridgeCmdHandler, null, [{
    key: "getInstance",
    value: function getInstance() {
      if (!this.instance) this.instance = new HJBridgeCmdHandler();
      return this.instance;
    }

    /**
     *
     * @param {String} key
     * @param {Function} func
     */
  }]);
  return HJBridgeCmdHandler;
}();
_defineProperty(HJBridgeCmdHandler, "mMap", null);
_defineProperty(HJBridgeCmdHandler, "instance", null);
var HJBridgeCmdUtil = /*#__PURE__*/function () {
  function HJBridgeCmdUtil() {
    var _this2 = this;
    _classCallCheck(this, HJBridgeCmdUtil);
    _defineProperty(this, "registerFunc", function (key, func) {
      _this2.__handler.putFunc(key, func);
    });
    this.__handler = HJBridgeCmdHandler.getInstance();
  }
  _createClass(HJBridgeCmdUtil, null, [{
    key: "getInstance",
    value: function getInstance() {
      if (!this.__instance) this.__instance = new HJBridgeCmdUtil();
      return this.__instance;
    }

    /**
     *
     * @param {String} key
     * @param {Function} func
     */
  }]);
  return HJBridgeCmdUtil;
}();
_defineProperty(HJBridgeCmdUtil, "__instance", null);
var HJBridgeCmdDispatcher = function HJBridgeCmdDispatcher() {
  var __handler = HJBridgeCmdHandler.getInstance();
  var checkCmd = function checkCmd(obj) {
    return obj != null && typeof obj == "string";
  };

  /**
   *
   * @param {String} jsons
   */
  var dispatchCmd = function dispatchCmd(jsons) {
    var parsed_obj = JSON.parse(jsons);
    var _parsed_obj$command = parsed_obj.command,
      command = _parsed_obj$command === void 0 ? null : _parsed_obj$command,
      _parsed_obj$params = parsed_obj.params,
      params = _parsed_obj$params === void 0 ? "" : _parsed_obj$params;
    if (command != null) __handler.execFunc(command, params);
  };
  return {
    /**
     *
     * @param {String} jsons
     * @returns {Function} func
     */
    send: function send(jsons) {
      return checkCmd(jsons) ? dispatchCmd(jsons) : console.log("failed to invoke func!");
    }
  };
};
/*--end of formal class of jbridge--*/

/*<!---示例-->*/
//test example
//const alertMsg=(msg)=>{
//    console.log(msg)
//}

//注册JS当地函数
//HJBridgeCmdUtil.getInstance().registerFunc('alert',alertMsg)

//Native调用JS函数
//jso="{\"command\":\"alert\",\"params\":\"received msg from native,msg is hello,world\"}"
//HJBridgeCmdDispatcher().send(jso)

//JS调用Native函数使用示例
/*

const msg={command:"infost",params:"{\"messege\":\"hello\"}"}
console.log(JSON.stringify(msg))
const clj=()=>{
    java.ijbridge(JSON.stringify(msg))
}
*/